---
description: 
globs: 
alwaysApply: false
---

# Project Rule: Xiaozhi ESP32 Server

这是 **Xiaozhi ESP32 Server** 项目的开发规则文档，项目中使用了 Java、Python、Vue 和 CSS 等技术栈。以下是本项目的工作规则，旨在确保项目的高质量、高效率以及团队成员间的协作顺畅。

## 第一条：代码风格与规范

- **Java**：遵循 [Google Java Style Guide](mdc:https:/google.github.io/styleguide/javaguide.html)，确保代码简洁、易于维护。每个方法、类都应有明确的功能职责。
- **Python**：遵循 [PEP 8](mdc:https:/peps.python.org/pep-0008) 风格指南，代码应具备良好的可读性，避免冗余代码，增加注释以提高可维护性。
- **Vue**：组件化设计，采用官方推荐的 [Vue Style Guide](mdc:https:/v3.vuejs.org/style-guide) 来编写代码，确保项目结构清晰，便于扩展与维护。
- **CSS**：使用 BEM（块元素修饰符）方法进行样式命名，避免样式冲突和层叠问题。

## 第二条：项目结构与模块化

- **前端**：前端部分使用 Vue.js 实现，所有页面和功能模块都应采用组件化设计。每个功能模块尽量独立，避免不必要的耦合。
  - 路由管理：使用 Vue Router 进行路由管理。
  - 状态管理：使用 Vuex 进行全局状态管理，确保数据流动清晰。
  - 样式：使用 Vue 单文件组件，确保 HTML、CSS 和 JavaScript 在同一文件中维护，提升可读性和开发效率。
  
- **后端**：后端服务分为 Java 和 Python 部分，确保每个部分的职责清晰。
  - Java：负责核心业务逻辑、数据存储和处理。使用 Spring Boot 框架来构建 RESTful API。
  - Python：处理与 ESP32 的通信，负责数据采集与处理。推荐使用 Flask 或 FastAPI 框架。
  
- **数据库**：使用适合项目需求的数据库（如 MySQL 或 PostgreSQL）存储用户数据和设备信息，确保数据的一致性和高效访问。

## 第三条：API 设计与文档

- 所有 API 应遵循 [RESTful API 设计规范](mdc:https:/restfulapi.net)，确保易于理解和使用。
- API 路径应简洁且具有描述性，使用 HTTP 方法（GET、POST、PUT、DELETE）明确表示操作类型。
- 对于每个 API 路径，提供详细的请求和响应文档，使用 OpenAPI 或 Swagger 自动生成文档，确保开发人员能快速了解 API 使用方式。

## 第四条：开发与部署流程

- **开发流程**：
  - 每个开发人员在开始新功能开发时，应从 `dev` 分支拉取最新代码，避免合并冲突。
  - 开发完成后，提交 PR 至 `dev` 分支，进行代码审查。代码审查完成后，再合并至 `dev` 分支。
  - PR 描述中应包含清晰的功能描述、修复的问题和代码修改的相关说明。

- **部署流程**：
  - 项目使用 CI/CD 流水线进行自动化构建与部署，确保每次代码变更后都能自动进行构建、测试和部署。
  - 环境分为开发、测试和生产环境，确保每个环境的配置和数据是隔离的，避免环境间的干扰。

## 第五条：性能与安全优化

- **性能优化**：
  - 前端：确保页面加载速度快，图片和资源进行懒加载，避免阻塞主线程，减少不必要的 DOM 操作。
  - 后端：优化数据库查询，避免 N+1 查询，使用缓存（如 Redis）提升响应速度。
  - 前后端交互：API 请求应尽量减少数据传输量，使用压缩和分页等技术优化数据传输。

- **安全优化**：
  - **前端**：避免 XSS 攻击，使用 CSP（内容安全策略）来限制资源的加载来源，确保用户输入经过严格的验证与过滤。
  - **后端**：避免 SQL 注入，所有用户输入应进行验证与过滤，API 应当通过 HTTPS 提供服务，避免数据在传输过程中被窃取。
  - 采用 JWT 或 OAuth 等身份验证机制，确保系统的安全性。

## 第六条：测试与质量保障

- **单元测试**：使用 JUnit（Java）、pytest（Python）和 Vue Test Utils（Vue）进行单元测试，确保每个功能模块的独立性和稳定性。
- **集成测试**：使用 Postman 或自动化测试工具，测试 API 接口的正确性和稳定性。
- **前端测试**：使用 E2E（端到端）测试工具，如 Cypress 或 Selenium，进行前端功能的自动化测试，确保用户交互流程的完整性。
- **代码质量**：使用 ESLint（JavaScript）和 Pylint（Python）等工具进行静态代码分析，确保代码质量符合规范。

## 第七条：持续学习与技术更新

- 项目团队成员应持续关注新技术，探索 Vue.js、Spring Boot、Flask 等框架的新特性和最佳实践，保持技术栈的更新。
- 定期进行技术分享与讨论，帮助团队提升技术水平，并分享项目中的挑战与解决方案。

---